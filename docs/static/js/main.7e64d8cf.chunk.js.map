{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setImputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"kMAiCeA,MA9Bf,YAA2C,IAAnBC,EAAkB,EAAlBA,cAEpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,mCACA,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,IAC5BR,EAAe,CAACE,IAChBC,EAAc,MAOlB,SACG,uBACKM,KAAK,OACLC,MAAQR,EACRS,SAnBc,SAACN,GACvBF,EAAgBE,EAAEO,OAAOF,e,8BCRpBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGKI,MAAQF,GAHb,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcbM,GAda,4CAAH,sDCqBLO,MAnBf,YAAwC,IAAjBJ,EAAgB,EAAhBA,GAAGC,EAAa,EAAbA,MAAMV,EAAO,EAAPA,IAG5B,OADAc,QAAQC,IAAIN,EAAGC,EAAMV,GAIjB,qBAAKgB,UAAU,WAAf,SACA,sBAAKA,UAAU,8BAAf,UACG,qBAAKA,UAAU,oBAAoBC,IAAOjB,EAAMkB,IAAKR,IACrD,qBAAKM,UAAU,YAAf,SACA,oBAAIA,UAAU,YAAd,SAA2BN,YC2BvBS,EAlCC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGf,ECHwB,SAAEA,GAE1B,MAA0Bb,mBAAS,CAC/BoB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBIC,qBAAY,WAEZ1B,EAASC,GACR0B,MAAM,SAAAC,GAEHH,EAAS,CACLjB,KAAMoB,EACNL,SAAQ,SAKb,CAAEtB,IAIFuB,EDpB0BK,CAAc5B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAQrB,OACI,qCACA,qBAAIJ,UAAU,wDAAd,cAAyElB,KACxEsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,mCAAf,SAIWL,EAAOJ,KAAM,SAAAC,GAAG,OACf,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEcdkB,MArCf,WAEI,MAAoC1C,mBAAS,IAA7C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KASA,OACI,qCACA,8CAIA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ4C,EAAWrB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEAA,SAAWA,GADHA,Y,MCvBhC+B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7e64d8cf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AddCategory( { setCategories } ) {\r\n\r\n    const [inputValue, setImputValue] = useState('');\r\n\r\n    const handleImputChange = (e) =>{\r\n        setImputValue ( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length >= 1  ){\r\n            setCategories( [inputValue] );\r\n            setImputValue('');\r\n        }\r\n       \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={ handleSubmit }>\r\n           <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange= { handleImputChange }\r\n           />\r\n           </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>{\r\n\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=20&api_key=18kADJWjPkNJy2fNFjtZpKnX0hj4stCM`;\r\n    const respuesta = await fetch ( url );\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n   return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nfunction GifGridItem( {id,title,url} ) {\r\n\r\n    console.log(id,title,url);\r\n    return (\r\n        \r\n       \r\n        <div className=\"col-sm-3\">\r\n        <div className=\"card border-dark mb-3 h-100\">\r\n           <img className=\"card-img-top h-50\" src= { url } alt={title} />\r\n           <div className=\"card-body\">\r\n           <h5 className=\"card-text\">{title}</h5>\r\n           </div>\r\n           </div>\r\n           </div>\r\n       \r\n        \r\n    )\r\n}\r\n\r\nexport default GifGridItem;\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n\r\n    \r\n\r\n   \r\n\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn animate__delay-0.5s\"> { category }</h3>\r\n       { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n        <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n          \r\n            \r\n               {\r\n                   images.map ( img => (\r\n                    <GifGridItem \r\n                    key={img.id}\r\n                    { ...img }/>\r\n                   ))\r\n               }\r\n           \r\n            \r\n          \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n  \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n        useEffect ( () => {\r\n\r\n        getGifs( category )\r\n        .then( imgs => {\r\n           \r\n            setState({\r\n                data: imgs,\r\n                loading:false\r\n            })\r\n           \r\n        })\r\n\r\n        }, [ category ])\r\n\r\n\r\n\r\n    return state; // retorna el arreglo\r\n}","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nfunction GifExpertApp() {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    // const handleAdd = () =>{\r\n    //     // setCategories( [...categories, 'HxH'] );\r\n    //     setCategories(catego => [...catego, 'HxH'] );\r\n    // };\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h2>\r\n            GifExpertApp\r\n        </h2>\r\n\r\n        <AddCategory setCategories={ setCategories } />\r\n\r\n        <hr />\r\n\r\n        <ol>\r\n            { \r\n                categories.map( category => (\r\n                        <GifGrid \r\n                        key = { category }\r\n                        category={ category }\r\n                        \r\n                        />\r\n                )) \r\n             }\r\n        </ol>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n\n// GifexpertApp\n//con un h2 gifExpertApp\n"],"sourceRoot":""}